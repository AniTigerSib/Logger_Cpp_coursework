<--1. Реализация класса Logger-->

Создание класса Logger с методами для обработки сообщений логирования.

<--2. Анализ конфигурации-->
конфигурация задается полностью для логгера
2.1. Выбор места вывода сообщения (стандартный поток вывода, файл).
2.2. Установка уровня логирования (дебаг - 7, инфо - 6, уведомление - 5, предупреждение - 4, ошибки - 3, критичные - 2, тревога - 1, чрезвычайные - 0).
!!! Логгирование сообщений производится начиная с установленного уровня !!!
2.3. Добавление даты и времени в сообщение.
2.4. Установка размера буфера, по переполнению которого будет выдано сообщение.
2.5. Установка размера файла лога и определение необходимости архивировать файлы.
2.6. Возможность работы в отдельном потоке (std::Thread).

<--3. Приём сообщений-->

Реализация функции или перегрузка оператора вывода (operator <<) для приема сообщений. При выводе должна быть возможность указать уровень сообщения.

<--4. Многопоточность-->

Предусмотреть использование логгера из разных потоков (std::mutex).

<--5. Тестирование-->

Провести тестирование класса Logger в различных сценариях использования.

<--6. Документация-->

Создание документации с описанием функциональности класса Logger и примерами использования.

/\/\/\ Расширение:

<--2. Анализ конфигурации-->

2.1. Выбор места вывода сообщения
2.1.1. Определение интерфейса для вывода сообщений.
2.1.2. Реализация методов для вывода сообщений в стандартный поток вывода.
2.1.3. Реализация методов для вывода сообщений в файл.
2.2. Установка уровня логирования
2.2.1. Определение уровней логирования.
2.2.2. Реализация метода для установки уровня логирования.
2.3. Добавление даты и времени в сообщение
2.3.1. Реализация метода для получения текущей даты и времени.
2.3.2. Реализация метода для форматирования даты и времени.
2.4. Установка размера буфера
2.4.1. Реализация метода для установки размера буфера.
2.4.2. Реализация метода для обработки переполнения буфера.
2.5. Установка размера файла лога и архивирование файлов
2.5.1. Реализация метода для установки размера файла лога.
2.5.2. Реализация метода для архивирования файлов.
2.6. Работа в отдельном потоке
2.6.1. Реализация метода для создания отдельного потока.
2.6.2. Реализация метода для управления потоком.

<--3. Приём сообщений-->

3.1. Реализация функции для приема сообщений
3.1.1. Определение интерфейса функции.
3.1.2. Реализация функции для приема сообщений.
3.1.3. Реализация функции для указания уровня сообщения.
3.2. Перегрузка оператора вывода
3.2.1. Определение интерфейса оператора.
3.2.2. Реализация оператора для приема сообщений.
3.2.3. Реализация функции для указания уровня сообщения при использовании оператора.

<--4. Многопоточность-->

4.1. Реализация многопоточности
4.1.1. Определение интерфейса для работы с многопоточностью.
4.1.2. Реализация метода для создания нового потока.
4.1.3. Реализация метода для управления потоком.
4.2. Использование мьютексов
4.2.1. Определение интерфейса для работы с мьютексами.
4.2.2. Реализация метода для блокировки мьютекса.
4.2.3. Реализация метода для разблокировки мьютекса.
4.3. Синхронизация потоков
4.3.1. Реализация метода для синхронизации потоков.
4.3.2. Реализация метода для обработки условий гонки.
4.4. Тестирование многопоточности
4.4.1. Разработка тестовых сценариев для проверки многопоточности.
4.4.2. Проведение тестирования и анализ результатов.


file=/tmp/test.log,lev=6,date,trunc=10M.
std,lev=3

std::ostream& operator<<(std::ostream out, const std::string str)
{
	out << str;
    return out
}

logger.Debug() << “Hello world” << std::endl;
logger.Info() << “Hello world” << std::endl;
